@inject IControllerServices<SmartPhoneModel> _SmartPhoneService;
@inject IControllerServices<Brand> _BrandService;


<div class="border m-2 p-3 rounded rounded-1 shadow">
    @if (HideForm)
    {
        <button @onclick="()=>HideForm=false" class="btn btn-outline-success">
            Nuevo Registro
        </button>
    }
    else
    {
        <EditForm Model="ObjSmartPhone" class="d-flex flex-column gap-1">
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Fecha Adquisición
                </label>
                <InputDate @bind-Value="ObjSmartPhone.AdquisitionDate" class="form-control w-75"></InputDate>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    IMEI
                </label>
                <InputTextArea @bind-Value="ObjSmartPhone.IMEIs" class="form-text w-75"></InputTextArea>
            </div>
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Modelo
                </label>
                <InputText @bind-Value="ObjSmartPhone.PhoneModel" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Numero de Serie
                </label>
                <InputText @bind-Value="ObjSmartPhone.PhoneSerial" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Costo
                </label>
                <InputText @bind-Value="ObjSmartPhone.Cost" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Descripción
                </label>
                <InputTextArea @bind-Value="ObjSmartPhone.Description" class="form-text w-75"></InputTextArea>
            </div>

            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Estado del equipo
                </label>
                <InputSelect @bind-Value="ObjSmartPhone.Status" class="form-control w-75">
                    <option>Nuevo</option>
                    <option>Buen estado</option>
                    <option>Estado Regular</option>
                    <option>Mal Estado</option>
                </InputSelect>
            </div>
            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    Activo
                </label>
                <InputCheckbox @bind-Value="ObjSmartPhone.isActive" class="form-check w-75"></InputCheckbox>
            </div>

            <div class="form-group d-flex flex-row justify-content-between">
                <label class="w-25">
                    @nameof(ObjSmartPhone.BrandId)
                </label>
                <InputSelect @bind-Value="ObjSmartPhone.BrandId" class="form-select w-75">
                    @foreach (Brand item in Brands)
                    {
                        <option value="@item.BrandId"> @item.Name </option>
                    }
                </InputSelect>
            </div>
        </EditForm>
        <button @onclick="Save" class="btn btn-outline-info">
            Agregar
        </button>
        <button @onclick="()=>HideForm=true" class="btn btn-outline-warning">
            Cancelar
        </button>
    }
    <label class="text-danger">@errorMessage</label>
</div>


@code {
    [Parameter]
    public EventCallback OnSmartPhoneAdded { get; set; }

    SmartPhoneModel ObjSmartPhone = new();
    bool HideForm = true;
    List<Brand> Brands = new();

    string errorMessage = "";
    protected override async Task OnInitializedAsync()
    {
        ObjSmartPhone.AdquisitionDate = DateTime.Now;
        ObjSmartPhone.PhoneNumber = "";
        Brands = _BrandService.GetAll();
        base.OnInitializedAsync();

    }

    private async Task Save()
    {
        try
        {
            if (IsValid())
            {
                _SmartPhoneService.Add(ObjSmartPhone);
                // Dispara el evento para indicar que se agregó una nueva computadora
                ObjSmartPhone = new();
                HideForm = true;
                errorMessage = "";
                await OnSmartPhoneAdded.InvokeAsync();
                
            }
        }
        catch (Exception e)
        {
            errorMessage = $"{e.Message} {e.InnerException}";
        }
    }

    private bool IsValid()
    {
        if (string.IsNullOrEmpty(ObjSmartPhone.IMEIs))
        {
            errorMessage = $"El IMEI del dispositivo no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.PhoneModel))
        {
            errorMessage = $"El modelo del teléfono no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.PhoneSerial))
        {
            errorMessage = $"La serie del teléfono no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.IMEIs))
        {
            errorMessage = $"El IMEI del dispositivo no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.Cost))
        {
            errorMessage = $"El costo del dispositivo no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.Description))
        {
            errorMessage = $"La descripción del dispositivo no puede estar vacío";
            return false;
        }
        if (string.IsNullOrEmpty(ObjSmartPhone.Status))
        {
            errorMessage = $"El estado del dispositivo no puede estar vacío";
            return false;
        }
        if (ObjSmartPhone.BrandId == null || ObjSmartPhone.BrandId == 0)
        {
            errorMessage = $"Tienen que indicar una marca";
            return false;
        }
        return true;
    }
}
