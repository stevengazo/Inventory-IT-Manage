@inject IControllerServices<Employee> _EmployeeService;
@inject IControllerServices<Departament> _DepartamentService;
@inject NavigationManager Nav;




<div class="border m-2 p-3 rounded rounded-1 shadow">
        <EditForm Model="ObjEmployee">
        <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
            <label class="w-25">
                @nameof(ObjEmployee.EmployeeId)
            </label>
            <InputNumber @bind-Value="ObjEmployee.DNI" class="form-control  w-75"></InputNumber>
        </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.Name)
                </label>
                <InputText @bind-Value="ObjEmployee.Name" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.LastName)
                </label>
                <InputText @bind-Value="ObjEmployee.LastName" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.SecondLastName)
                </label>
                <InputText @bind-Value="ObjEmployee.SecondLastName" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.Email)
                </label>
                <InputText placeholder="sample@gmail.com" @bind-Value="ObjEmployee.Email" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.PhoneNumber)
                </label>
                <InputNumber @bind-Value="ObjEmployee.PhoneNumber" class="form-control  w-75"></InputNumber>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.Birthday)
                </label>
                <InputDate @bind-Value="ObjEmployee.Birthday" class="form-control  w-75"></InputDate>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
               <label class="w-25">
                    @nameof(ObjEmployee.DepartamentID)
                </label>
                <InputSelect @bind-Value="ObjEmployee.DepartamentID" class="form-control  w-75">

                    @foreach (Departament item in Departaments)
                    {
                        <option value="@item.DepartamentID">@item.Name</option>
                    }
                </InputSelect>
            </div>
        <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
            <label class="w-25">
                @nameof(ObjEmployee.Fired)
            </label>
            <InputCheckbox @bind-Value="ObjEmployee.Fired" class=" w-75"></InputCheckbox>
        </div>
        </EditForm>
        <div>
            <button @onclick="Save" class="btn btn-outline-info"> Agregar</button>
            <button @onclick="Cancel" class="btn btn-outline-warning"> Cancelar</button>
        </div>
    


</div>



@code {
    [Parameter]
    public Employee ObjEmployee { get; set; }

    List<Departament> Departaments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        Departaments = _DepartamentService.GetAll();
    }

    private async Task Save()
    {
        try
        {
            _EmployeeService.Update(ObjEmployee);
            Nav.NavigateTo($"/employee/{ObjEmployee.EmployeeId}");

        }
        catch (Exception e)
        {

            throw;
        }


    }


    private async Task Cancel()
    {
        Nav.NavigateTo($"employees");
    }
}
