@inject IControllerServices<Employee> _EmployeeService

@inject IControllerServices<Departament> _DepartamentService




<div class="border m-2 p-3 rounded rounded-1 shadow">
    @if (HiddeForm)
    {
        <button @onclick="()=>HiddeForm=false" class="btn btn-outline-success"> Agregar Empleado</button>
    }
    else
    {
        <EditForm Model="ObjEmployee">
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Cédula
                </label>
                <InputNumber @bind-Value="ObjEmployee.DNI" class="form-control form-control-sm w-75"></InputNumber>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Nombre
                </label>
                <InputText @bind-Value="ObjEmployee.Name" class="form-control form-control-sm w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Primer Apellido
                </label>
                <InputText @bind-Value="ObjEmployee.LastName" class="form-control form-control-sm w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Segundo Apellido
                </label>
                <InputText @bind-Value="ObjEmployee.SecondLastName" class="form-control form-control-sm w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Correo
                </label>
                <InputText placeholder="sample@gmail.com" @bind-Value="ObjEmployee.Email" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Téléfono
                </label>
                <InputNumber @bind-Value="ObjEmployee.PhoneNumber" class="form-control w-75"></InputNumber>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Fecha Nacimiento
                </label>
                <InputDate @bind-Value="ObjEmployee.Birthday" class="form-control w-75"></InputDate>
            </div>
            <div class="form-group d-flex flex-row justify-content-sm-between px-5 my-2">
                <label class="w-25">
                    Departamento
                </label>
                <InputSelect @bind-Value="ObjEmployee.DepartamentID" class="form-select w-75">

                    @foreach (Departament item in Departaments)
                    {
                        <option value="@item.DepartamentID">@item.Name</option>
                    }
                </InputSelect>
            </div>
        </EditForm>
        <div class="d-flex justify-content-end gap-2 px-5 my-2">
            <button @onclick="Save" class="btn btn-outline-success"> Agregar</button>
            <button @onclick="()=>HiddeForm=true" class="btn btn-outline-warning"> Cancelar</button>
        </div>
    }
    <label>@Error</label>



</div>



@code {
    [Parameter]
    public EventCallback OnEmployeeAdded { get; set; }

    List<Departament> Departaments { get; set; }
    bool HiddeForm = true;
    string Error = "";
    Employee ObjEmployee = new();
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        Departaments = _DepartamentService.GetAll();
        ObjEmployee.Birthday = DateTime.Today;
    }

    private async Task Save()
    {
        try
        {
            ObjEmployee.Fired = false;
            _EmployeeService.Add(ObjEmployee);
            await OnEmployeeAdded.InvokeAsync();
            ObjEmployee = new();
            HiddeForm = true;
            Error = "";

        }
        catch (ArgumentNullException e)
        {
            Error = e.Message;

        }
        catch (Exception e)
        {
            Error = e.Message;
        }


    }

}
