@inject IControllerServices<ComputerModel> _ComputerService;
@inject IControllerServices<Brand> _BrandService;


<div class="border m-2 p-3 rounded rounded-1 shadow">
    @if (HideForm)
    {
        <button @onclick="()=>HideForm=false" class="btn btn-outline-success">
            Nuevo Registro
        </button>
    }
    else
    {
        <EditForm Model="ObjComputer">
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Numero de Serie
                </label>
                <InputText @bind-Value="ObjComputer.SerialNumber" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Modelo
                </label>
                <InputText @bind-Value="ObjComputer.ModelName" class="form-control  w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Fecha Adquisición
                </label>
                <InputDate @bind-Value="ObjComputer.AdquisitionDate"  class="form-control w-75"></InputDate>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Costos (Dólar)
                </label>
                <InputText @bind-Value="ObjComputer.Cost" class="form-text w-75"></InputText>

            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Procesador
                </label>
                <InputText @bind-Value="ObjComputer.Processor" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Tiene SSD
                </label>
                <InputCheckbox @bind-Value="ObjComputer.HaveSSD" class="form-check w-75"></InputCheckbox>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Tamaño Disco (GB)
                </label>
                <InputNumber @bind-Value="ObjComputer.SizeDisk" class="form-control w-75"></InputNumber>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Tamaño RAM (GB)
                </label>
                <InputNumber @bind-Value="ObjComputer.SizeRAM" class="form-control  w-75"></InputNumber>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Tipo RAM
                </label>
                <InputSelect @bind-Value="ObjComputer.RAMType" class="form-select w-75">
                    <option>No indicado</option>
                    <option>DDR-2</option>
                    <option>DDR-3</option>
                    <option>DDR-4</option>
                    <option>DDR-6</option>
                </InputSelect>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Descripción
                </label>
                <InputTextArea @bind-Value="ObjComputer.Description" class="form-text w-75"></InputTextArea>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Distribución Teclado
                </label>
                <InputText @bind-Value="ObjComputer.KeyboardLayout" class="form-text w-75"></InputText>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Teclado Númerico
                </label>
                <InputCheckbox @bind-Value="ObjComputer.HasNumericKeyboard" class=" w-75"></InputCheckbox>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Equipo Activo
                </label>
                <InputCheckbox @bind-Value="ObjComputer.IsActive" class="form-checkbox w-75"></InputCheckbox>
            </div>
            <div class="form-group d-flex flex-row justify-content-between my-1">
                <label class="w-25">
                    Marca Computadora
                </label>
                <InputSelect @bind-Value="ObjComputer.BrandId" class="form-select w-75">
                    <option value="0"> No Definido </option>
                    @foreach (Brand item in Brands)
                    {
                        <option value="@item.BrandId"> @item.Name </option>
                    }
                </InputSelect>
            </div>
        </EditForm>
        <div class="d-flex justify-content-end gap-2 px-5 my-2">
            <button @onclick="Save" class="btn btn-outline-info">
                Agregar
            </button>
            <button @onclick="()=>HideForm=true" class="btn btn-outline-warning">
                Cancelar
            </button>
            </div>
        <label class="text-danger">@errorMessage</label>
    }
</div>


@code {
    [Parameter]
    public EventCallback OnComputerAdded { get; set; }

    ComputerModel ObjComputer = new();
    bool HideForm = true;
    List<Brand> Brands = new();
    string errorMessage = "";
    protected override async Task OnInitializedAsync()
    {
        ObjComputer.AdquisitionDate = DateTime.Now;
        ObjComputer.RAMType = "No indicado";
        Brands = _BrandService.GetAll();
        base.OnInitializedAsync();

    }

    private async Task Save()
    {
        try
        {
            if (IsValid())
            {
                _ComputerService.Add(ObjComputer);
                // Dispara el evento para indicar que se agregó una nueva computadora
                await OnComputerAdded.InvokeAsync();
                ObjComputer = new();
                HideForm = true;
                errorMessage = string.Empty;
            }
        }
        catch (Exception e)
        {

            throw e;
        }
    }

    private bool IsValid()
    {
        if (string.IsNullOrEmpty(ObjComputer.SerialNumber))
        {
            errorMessage = "Verifique el número de serie";
            return false;
        }
        if (string.IsNullOrEmpty(ObjComputer.ModelName))
        {
            errorMessage = "Verifique el modelo";
            return false;
        }
        if (string.IsNullOrEmpty(ObjComputer.Cost))
        {
            errorMessage = "No indica el costo";
            ObjComputer.Cost = "0";
            return false;
        }
        if (string.IsNullOrEmpty(ObjComputer.Processor))
        {
            errorMessage = "No indica el procesador";
            return false;
        }
        if (ObjComputer.SizeDisk == 0)
        {
            errorMessage = "No indica el tamaño del disco";
            return false;
        }
        if (ObjComputer.SizeRAM == 0)
        {
            errorMessage = "No indica el tamaño de la RAM";
            return false;
        }
        ObjComputer.Description = string.IsNullOrEmpty(ObjComputer.Description) ? " Sin Asignar" : ObjComputer.Description;
        if (string.IsNullOrEmpty(ObjComputer.KeyboardLayout))
        {
            errorMessage = "No indica la distribución del teclado";
            return false;
        }
        if (ObjComputer.BrandId == 0 ||ObjComputer.BrandId ==null )
        {
            errorMessage = "No indica la marca del equipo";
            return false;
        }
        return true;
    }
}
