@using Microsoft.AspNetCore.Http;
@using PdfSharp.Drawing;
@using PdfSharp.Drawing.Layout;
@using PdfSharp.Pdf;
@using PdfSharp.Quality;
@inject PDFService pdfService
@inject IJSRuntime JS
@inject IHttpContextAccessor httpContextAccessor



<!-- Formulario de búsqueda -->
<div class="shadow p-2 rounded my-2 ">
    <label> Busqueda</label>
    <form @onsubmit="SearchPhones">
        <div class="row mb-3">
            <div class="col-md-4">
                <input type="number" class="form-control" placeholder="Buscar por número de teléfono" @bind="searchPhoneNumber" />
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Buscar por modelo" @bind="searchModel" />
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Buscar por número de serie" @bind="searchSerial" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Buscar</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearSearch">Limpiar</button>
    </form>
</div>




<div class="shadow p-2 rounded">
    <table class="table">
        <thead>
            <tr>
                <th>
                    Fecha Registro
                </th>
                <th>
                    Numero Telefonico
                </th>
                <th>
                    Operador
                </th>
                <th>
                    Tipo
                </th>
                <th>
                    Marca
                </th>
                <th>
                    Modelo
                </th>
                <th>
                    Serie
                </th>
                <th colspan="2">
                    Encargado
                </th>
                <th>
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @if (filteredPhoneModels != null)
            {
                foreach (var item in filteredPhoneModels)
                {
                    if (item.IsActive)
                    {
                        <tr>
                            <td>
                                @item.CreationDate.ToShortDateString()
                            </td>
                            <td>
                                @item.PhoneNumber.Operator
                            </td>
                            <td>
                                @item.PhoneNumber.Number
                            </td>
                            <td>
                                @item.PhoneNumber.Type
                            </td>
                            <td>
                                @item.PhoneNumberModel.Brand.Name
                            </td>
                            <td>
                                @item.PhoneNumberModel.PhoneModel
                            </td>
                            <td>
                                @item.PhoneNumberModel.PhoneSerial
                            </td>
                            <td>
                                @item.Employee.LastName
                            </td>
                            <td>
                                @item.Employee.Name
                            </td>
                            
                            <button @onclick="()=>DownloadPDF(item)" class="bg-warning border-0 h-100 h-100 rounded rounded-1 p-2 mx-1">
                                <span class="oi oi-document text-white" aria-hidden="true"></span>
                            </button>
                            <AuthorizeView Roles="Administrador">
                                <Authorized>
                                    <a href="/phone-number-user/@item.Id" class="bg-danger h-100 h-100 rounded rounded-1 p-2 mx-1">
                                        <span class="oi oi-delete text-white" aria-hidden="true"></span>
                                    </a>
                                    <a href="/smartphone/@item.SmartPhoneModelId" class="bg-info border-0 h-100 h-100 rounded rounded-1 p-2 mx-1">
                                        <span class="oi oi-data-transfer-upload text-white" aria-hidden="true"></span>
                                    </a>
                                </Authorized>
                                <NotAuthorized>

                                </NotAuthorized>
                            </AuthorizeView>
                            <td>
                            </td>
                        </tr>
                    }
                }
            }

        </tbody>
    </table>
</div>



@code {
    [Parameter]
    public List<Phone_Number_User_Model> phone_Number_User_Models { get; set; }

    // Variables para capturar los valores de búsqueda
    private int searchPhoneNumber { get; set; } = 0;
    private string searchModel { get; set; } = string.Empty;
    private string searchSerial { get; set; } = string.Empty;

    // Lista filtrada que se usa para mostrar los resultados de búsqueda
    private List<Phone_Number_User_Model> filteredPhoneModels;

    protected override async Task OnInitializedAsync()
    {
        filteredPhoneModels = phone_Number_User_Models;
        base.OnInitializedAsync();   
    }


    // Método para limpiar los campos de búsqueda y restaurar la lista original
    private void ClearSearch()
    {
        searchPhoneNumber = 0;
        searchModel = string.Empty;
        searchSerial = string.Empty;
        filteredPhoneModels = phone_Number_User_Models;
    }

    private void SearchPhones()
    {
        // Inicializamos la consulta base sobre la lista de modelos de teléfono
        var query = phone_Number_User_Models.AsQueryable();

        // Filtrar por número de teléfono si se proporciona uno distinto de 0
        if (searchPhoneNumber != 0)
        {
            query = query.Where(item => item.PhoneNumber.Number == searchPhoneNumber);
        }

        // Filtrar por modelo de teléfono si se proporciona uno
        if (!string.IsNullOrEmpty(searchModel))
        {
            query = query.Where(item => item.PhoneNumberModel.PhoneModel.ToUpper().Contains(searchModel.ToUpper()));
        }

        // Filtrar por número de serie si se proporciona uno
        if (!string.IsNullOrEmpty(searchSerial))
        {
            query = query.Where(item => item.PhoneNumberModel.PhoneSerial.ToUpper().Contains(searchSerial.ToUpper()));
        }

        // Convertir el resultado filtrado a una lista
        filteredPhoneModels = query.ToList();
    }


    private async Task DownloadPDF(Phone_Number_User_Model e)
    {
        try
        {
            byte[] pdfBytes = await pdfService.GeneratePDFPhone(e);
            // Convertir los bytes del PDF a una cadena base64 para pasarlos a JavaScript
            string pdfBase64 = Convert.ToBase64String(pdfBytes);
            // Invocar una función JavaScript para iniciar la descarga del PDF
            await JS.InvokeVoidAsync("downloadPDF", pdfBase64, $"Entrega Telefono {e.Employee.Name} {e.Employee.LastName} {DateTime.Now.ToShortTimeString()}.pdf");
        }
        catch (Exception ec)
        {
            throw;
        }
    }
}
