@inject PDFService pdfService
@inject IJSRuntime JS
@inject IHttpContextAccessor httpContextAccessor


<h3> Extensiones Registradas</h3>

<div class="d-flex flex-column justify-content-between p-2">
    
    <p>
        Esta tabla muestra la información sobre la asignación, la extension y el pbx utilizado.
    </p>
    <div class="d-flex flex-row justify-content-between gap-2">

        <button @onclick="DownloadPDF" class="btn btn-outline-warning btn-sm">Descargar</button>
        <input type="text" placeholder="Búsqueda (PBX,Usuario o Extension)" @onchange="@(e => Search(((ChangeEventArgs)e).Value.ToString()))" class="form-control w-25" />
    
    </div>
    
</div>

<div class="overflow-auto">
    <table class="table table-sm table-striped table-hover">
        <thead>
            <tr>
                <th>
                    Nombre
                </th>
                <th>
                    PBX
                </th>
                @if (!infoisPublic)
                {
                    <th>
                        Usuario
                    </th>
                    <th>
                        Contraseña
                    </th>
                }
                <th>
                    Extension
                </th>
                <th>
                    Empleado
                </th>
                <th colspan="1">
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Extensionstemp != null)
            {
                foreach (PhoneExtension item in Extensionstemp)
                {
                    <tr>
                        <td>
                            @item.PhoneExtensionName
                        </td>
                        <td>
                            @item.PhoneNumberPBX
                        </td>
                        @if (!infoisPublic)
                        {
                            <td>
                                @item.UserNumber
                            </td>
                            <td>
                                @item.Password
                            </td>
                        }
                        <td>
                            @item.Extension
                        </td>
                        @if (item.Employee != null && !item.Employee.Fired)
                        {
                            <td>
                                @item.Employee.Name @item.Employee.LastName
                            </td>
                        }
                        else if (item.Employee != null && item.Employee.Fired)
                        {
                            <td class="text-danger">
                                @item.Employee.Name @item.Employee.LastName (despedido)
                            </td>
                        }
                        else
                        {
                            <td class="text-info">
                                Sin Asignar
                            </td>
                        }
                        <AuthorizeView Roles="Administrador">
                            <Authorized>
                                <td class="d-flex flex-row gap-1">
                                    <a href="/extensions/@item.PhoneExtensionId" class="btn btn-outline-info">Detalles</a>

                                    <a href="/extension/assign/@item.PhoneExtensionId" class="btn btn-outline-success">Asignación</a>

                                    <a href="/extension/edit/@item.PhoneExtensionId" class="btn btn-outline-info">Editar</a>
                                </td>

                            </Authorized>
                            <NotAuthorized>
                                <td class="text-warning">
                                    Acciones no disponibles
                                </td>
                            </NotAuthorized>
                        </AuthorizeView>


                    </tr>

                }
            }
        </tbody>
    </table>
</div>




@code {
    [Parameter]
    public List<PhoneExtension> Extensions { get; set; }

    [Parameter]
    public bool PublicInfo { get; set; }

    private bool infoisPublic = false;

    List<PhoneExtension> Extensionstemp = new();
    protected override async Task OnInitializedAsync()
    {
        infoisPublic = PublicInfo;
        Extensionstemp = Extensions;
        base.OnInitializedAsync();   
    }

    private void Search(string SearchValue = "")
    {
        bool valid = int.TryParse(SearchValue, out int valueSe);

        if (valid)
        {
            if (!string.IsNullOrEmpty(SearchValue))
            {
                Extensionstemp = (from i in Extensions
                                  where i.PhoneNumberPBX == valueSe || i.UserNumber == valueSe.ToString() || i.Extension == valueSe
                                  select i)
                    .ToList();
            }
            else
            {
                Extensionstemp = Extensions;
            }
        }
        else
        {
            Extensionstemp = Extensions;
        }

    }

    private async Task DownloadPDF()
    {
        try
        {
            byte[] pdfBytes = await pdfService.GenerateListExtensions(Extensions);


            // Convertir los bytes del PDF a una cadena base64 para pasarlos a JavaScript
            string pdfBase64 = Convert.ToBase64String(pdfBytes);

            // Invocar una función JavaScript para iniciar la descarga del PDF
            await JS.InvokeVoidAsync("downloadPDF", pdfBase64, $"Extensiones {DateTime.Today.ToString("yyyy-MMM-dd")}.pdf");
        }
        catch (Exception ec)
        {
            throw;
        }
    }
}
