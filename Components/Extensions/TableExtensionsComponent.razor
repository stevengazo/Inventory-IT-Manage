@inject PDFService pdfService
@inject IJSRuntime JS
@inject IHttpContextAccessor httpContextAccessor


<h3> Extensiones Registradas</h3>
<div class="d-flex flex-row justify-content-between">
    <p>
        Esta tabla muestra la informacion sobre la asignacion, la extension y el pbx utilizado.
    </p>
    <button @onclick="DownloadPDF" class="btn btn-outline-warning btn-sm">Descargar</button>

</div>


<table class="table">
    <thead>
        <tr>
            <th>
                Nombre
            </th>
            <th>
                PBX
            </th>
            @if (!infoisPublic)
            {
                <th>
                    Usuario
                </th>
                <th>
                    Contraseña
                </th>
            }
            <th>
                Extension
            </th>
            <th>
                Empleado
            </th>
            <th colspan="1">
                Acciones
            </th>
        </tr>
    </thead>
    <tbody>
        @if(Extensions != null)
        {
            foreach (PhoneExtension item in Extensions)
            {
                <tr>
                    <td>
                        @item.PhoneExtensionName
                    </td>
                    <td>
                        @item.PhoneNumberPBX
                    </td>
                    @if (!infoisPublic)
                    {
                        <td>
                            @item.UserNumber
                        </td>
                        <td>
                            @item.Password
                        </td>
                    }
                    <td>
                        @item.Extension
                    </td>
                    @if (item.Employee != null && !item.Employee.Fired)
                    {
                        <td>
                            @item.Employee.Name @item.Employee.LastName
                        </td>
                    }
                    else if (item.Employee != null && item.Employee.Fired)
                    {
                        <td class="text-danger">
                            @item.Employee.Name @item.Employee.LastName (despedido)
                        </td>
                    }
                    else 
                    {
                        <td class="text-info">
                         Sin Asignar
                        </td>
                    }
                    <AuthorizeView Roles="Administrador">
                        <Authorized>
                            <td class="d-flex flex-row gap-1">
                                <a href="/extensions/@item.PhoneExtensionId" class="btn btn-outline-info">Detalles</a>

                                <a href="/extension/assign/@item.PhoneExtensionId" class="btn btn-outline-success">Asignación</a>

                                <a href="/extension/edit/@item.PhoneExtensionId" class="btn btn-outline-info">Editar</a>
                            </td>

                        </Authorized>
                        <NotAuthorized>
                            <td class="text-warning">
                                Acciones no disponibles
                            </td>
                        </NotAuthorized>
                    </AuthorizeView>

                    
                </tr>

            }
        }
    </tbody>
</table>



@code {
    [Parameter]
    public List<PhoneExtension> Extensions { get; set; }
    [Parameter]
    public bool PublicInfo { get; set; }

    private bool infoisPublic = false;

    protected override async Task OnInitializedAsync()
    {
        infoisPublic = PublicInfo;
        base.OnInitializedAsync();   
    }

    private async Task DownloadPDF()
    {
        try
        {
            byte[] pdfBytes = await pdfService.GenerateListExtensions(Extensions);


            // Convertir los bytes del PDF a una cadena base64 para pasarlos a JavaScript
            string pdfBase64 = Convert.ToBase64String(pdfBytes);

            // Invocar una función JavaScript para iniciar la descarga del PDF
            await JS.InvokeVoidAsync("downloadPDF", pdfBase64, $"Extensiones {DateTime.Today.ToString("yyyy-MMM-dd")}.pdf");
        }
        catch (Exception ec)
        {
            throw;
        }
    }
}
