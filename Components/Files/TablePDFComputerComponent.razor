@inject IJSRuntime JS
@inject FileService FService


<div class="p-2 my-3 shadow rounded rounded-1 border border-1">
    <div class="d-flex flex-row gap-2 align-middle justify-content-start">
        <span style="background-color:purple" class=" h-100 h-100 p-2 rounded rounded-1 oi oi-document text-white" aria-hidden="true"></span>
        <!-- Encabezado del componente -->
        <h3 class="text-start h-100 align-content-center">Archivos</h3>
    </div>
    <p>Aqui se muestran los archivos en formato pdf existentes de este equipo</p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Nombre
                </th>
                <th>
                    Fecha Registro
                </th>
                <th>
                    Acciones
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (FileModel item in fileModels)
            {
                <tr>
                    <th>
                        @item.FileName
                    </th>
                    <th>
                        @item.CreationDate.ToLongDateString()
                    </th>
                    <th>
                        <button @onclick="()=>DownloadPDF(item)" class="bg-warning border-0 h-100 h-100 rounded rounded-1 p-2">
                            <span class="oi oi-document text-white" aria-hidden="true"></span>
                        </button>
                        <button @onclick="()=>Delete(item)" class="bg-danger border-0 h-100 h-100 rounded rounded-1 p-2">
                            <span class="oi oi-delete text-white" aria-hidden="true"></span>
                        </button>
                    </th>
                </tr>
            }
        </tbody>
    </table>
</div>
@code {
    [Parameter]
    public int id { get; set; }
    List<FileModel> fileModels = new();

    [Parameter]
    public string TypeModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        switch (TypeModel)
        {
            case nameof(SmartPhoneModel):
                fileModels = await FService.GetAllFilesSmartPhoneAsync(id);
                break;
            case nameof(ComputerModel):
                fileModels = await FService.GetAllFilesComputerAsync(id);
                break;
            default:
                break;
        }
        
        base.OnInitializedAsync();
    }


    private async Task Delete(FileModel e)
    {
        try
        {
            await FService.Delete(e);
            fileModels.Remove(e);
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task DownloadPDF(FileModel e)
    {
        try
        {
            // Convertir los bytes del PDF a una cadena base64 para pasarlos a JavaScript
            string pdfBase64 = Convert.ToBase64String(e.Content);
            // Invocar una función JavaScript para iniciar la descarga del PDF
            await JS.InvokeVoidAsync("downloadPDF", pdfBase64, $"{e.FileName}.pdf");
        }
        catch (Exception ec)
        {
            throw;
        }
    }

}
