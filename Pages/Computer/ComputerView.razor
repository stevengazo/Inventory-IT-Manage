@page "/computers/{id}"

@inject IControllerServices<ComputerModel> _ComputerService
@inject IHistoryServices<HistoryModel> _HistoryService

    <h3>
        Información de Computadora
    </h3>
@if (flag)
{
    <DetailsComputerComponent ComputerModel="@Computer" />
    
    <AssignComputerComponent OnComputerUpdated="@UpdateComputerList" ComputerModel="@Computer" />
    <TableHistoryByDeviceComponent Histories="@Histories" />
    <UploadFileComponent  id="_id" />
    <TablePDFComputerComponent/>

}
else
{
    <h4>Error "@id " no es valido</h4>
}



@code {

    [Parameter]
    public string id { get; set; }
    int _id = 0;
    bool flag = true;
    List<HistoryModel> Histories = new();
    private ComputerModel Computer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        flag = int.TryParse(id, out _id);

        Computer = (flag) ? _ComputerService.GetById(_id) : new();
        Histories = (flag) ? _HistoryService.HistoriesOfComputer(_id) : new();
        
        base.OnInitializedAsync();   
    }

    private async Task UpdateComputerList()
    {
        // Actualizar la lista de computadoras después de agregar una nueva computadora
        await InvokeAsync(() =>
        {
            flag = int.TryParse(id, out _id);
            Computer = _ComputerService.GetById(_id);
            Histories = _HistoryService.HistoriesOfComputer(_id);
            StateHasChanged(); // Asegura que se vuelva a renderizar el componente padre
        });
    }
}
