@page "/computers/{id}"

@inject IControllerServices<ComputerModel> _ComputerService
@inject IHistoryServices<HistoryModel> _HistoryService

<h3>
    Información de Computadora
</h3>

<AuthorizeView Roles="Administrador,Lector">
    <Authorized>
        @if (flag)
        {
            <div class="d-flex flex-row gap-2 w-100">
                <DetailsComputerComponent ComputerModel="@Computer" />
                <ImageContainerComponent id="_id" TypeModel="@nameof(ComputerModel)" />
            </div>
            
            <AssignComputerComponent OnComputerUpdated="@UpdateComputerList" ComputerModel="@Computer" />
            <AddHistoryComponent id="_id" OnUpdated="@UpdateComputerList" TypeModel="@nameof(ComputerModel)" />
            <TableHistoryByDeviceComponent Histories="@Histories" />
            <UploadFileComponent id="_id" TypeModel="@nameof(ComputerModel)" OnUpdated="@UpdateComputerList" />
            <TablePDFComputerComponent @ref="tablePDFComponent" id="_id" TypeModel="@nameof(ComputerModel)" />
        }
        else
        {
            <h4>Error "@id " no es valido</h4>
        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public string id { get; set; }
    int _id = 0;
    bool flag = true;
    List<HistoryModel> Histories = new();
    private ComputerModel Computer { get; set; }
    private TablePDFComputerComponent tablePDFComponent;

    protected override async Task OnInitializedAsync()
    {
        flag = int.TryParse(id, out _id);

        Computer = (flag) ? _ComputerService.GetById(_id) : new();
        Histories = (flag) ? _HistoryService.HistoriesOfComputer(_id) : new();

        base.OnInitializedAsync();
    }




    private async Task UpdateComputerList()
    {
        // Actualizar la lista de computadoras después de agregar una nueva computadora
        await InvokeAsync(() =>
        {
            flag = int.TryParse(id, out _id);
            Computer = _ComputerService.GetById(_id);
            Histories = _HistoryService.HistoriesOfComputer(_id);
            tablePDFComponent?.RefreshTable(); // Llamar al método para actualizar la tabla PDF
            StateHasChanged(); // Asegura que se vuelva a renderizar el componente padre
        });
    }
}
